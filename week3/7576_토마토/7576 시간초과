/*7576 토마토
익은 토마토(1)의 상하좌우에 있는 안익은 토마토(0)들은 하루 후 익음, 이때 다 익으려면 몇일이 걸리는지. -1이면 토마토 없음
모두 익지 못하는 상황이면 -1출력

//일 수 찾기
토마토가 익는게 몇일째인지 저장하는 벡터 생성
처음엔 0으로 초기화 해두고 큐에 insert할 때 이전 거의 +1해줌
다른 익은 토마토에서 시작하면 위 배열에 저장된 숫자보다 작으면 저장해주고 아니면 안함(먼저 익으면 바꿔주고 나중이면 안바꿔)



토마토 상자 2차원 벡터 생성
for문 돌며 1이면 너비우선탐색 ㄱㄱ
1. 큐에 1인 좌표 넣어주기
2. 방문표시(bfs돌 때마다 초기화), 몇일째인지 ++, 
3. q.front값 저장해놓고 pop
4. 상하좌우 (box안인지)검사해서 0이면
4-1. 큐에 좌표 넣어주기
4-2. 방문표시 해주고, 기존에있던 일수보다 작으면 일수 바꿔주기

->시간초과
*/

#include <iostream>
#include <vector>
#include <deque>
#include <algorithm>
using namespace std;

int n,m;
int pos_x,pos_y,nx,ny;
int r[2][4]={{-1,1,0,0},{0,0,-1,1}};
int days[1000][1000]={0};//며칠째에 익는지 일수 저장할 배열
vector<vector <int>> box;
//vector<vector <bool>> visited;
//int box[1000][1000];

bool isinside(int x, int y){
    return (x>=0&&y>=0&&x<m&&y<n);
}


void bfs(int x, int y){
    deque<pair<int,int>> q;
    //visited =vector<vector <bool>> (m,vector<bool>(n,0));//방문체크 false로 초기화
    bool visited[1000][1000]={0};
    
    q.push_back({x,y});
    visited[x][y]=true;
    days[x][y]=1;


    while(!q.empty()){ //큐가 비면 탈출
        pos_x=q.front().first;
        pos_y=q.front().second;

        q.pop_front();

        for(int i=0;i<4;i++){
            nx=pos_x+r[0][i];
            ny=pos_y+r[1][i];

            if(isinside(nx,ny)&&box[nx][ny]==0&&visited[nx][ny]==false){
            // 박스 안에 있고 안익은 토마토0이고 방문하지 않았으면
                q.push_back({nx,ny});//큐에 넣어주기
                visited[nx][ny]=true;//방문표시
                if(days[nx][ny]==0){
                    days[nx][ny]=days[pos_x][pos_y]+1;
                }
                if(days[pos_x][pos_y]+1<days[nx][ny]){//익는데 걸리는 일수가 더 적으면
                    days[nx][ny]=days[pos_x][pos_y]+1;//days값 바꿔주기
                }
                
            }
        }

    }
    return ;
}



int main(){
    cin>>n>>m;

    box=vector<vector<int>>(m,vector<int>(n,0));

    for(int i=0;i<m;i++){
        for(int j=0;j<n;j++){
            cin>>box[i][j];
        }
    } //입력받기

    for(int i=0;i<m;i++){
        for(int j=0;j<n;j++){
            if(box[i][j]==1){
                bfs(i,j);
            }
        }
    }//탐색

    //출력
    int result =0;
    for(int i=0;i<m;i++){
        for(int j=0;j<n;j++){
            if(box[i][j]==0&&days[i][j]==0){
                cout<< -1;
                return 0;
            }
            if(result<days[i][j]){
                result=days[i][j];
            }
            
        }
    }
    cout<<result-1;
    return 0;
}

