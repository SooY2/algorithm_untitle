//rgb거리
/*
1. rgb중 제일 작은 값 찾기
2. 제일 작은 값을 다음 집 rgb에 다 더하기
3. 그중에서 전의 rgb랑 안겹치는 것들 중 작은것을 제일 작은값으로 설정

--> 제일 작은 값이 아니여도 다음 rgb가 겹치면 안돼서 최소값이 아닐 수 있음
*/

#include <iostream>
#include <algorithm>
using namespace std;

int n, rgb[1000][3] ,D[1000][3],min_idx;

void input(){//rgb배열에 값 입력받기
    cin>>n;
    for(int j=0;j<n;j++){
        for(int i=0;i<3;i++){
            cin>>rgb[j][i];
        }
    }
    return;
}

void dp(){
    int MIN=rgb[0][0];
    D[0][0]=rgb[0][0];
    D[0][1]=rgb[0][1];
    D[0][2]=rgb[0][2];//D배열에 첫 집의 rgb비용 넣어주기
    for(int i=0;i<3;i++){
        if(MIN>=D[0][i]){
            MIN=D[0][i];
            min_idx=i;
        }
    }


    for(int i=1;i<n;i++){
        for(int j=0;j<3;j++){
            D[i][j]=D[i-1][min_idx]+rgb[i][j];
        }//일단 rgb에 전 집의 최소값 더해주기
        switch (min_idx)
        {
        case 0:
            D[i][1]<=D[i][2] ? min_idx=1:min_idx=2;
            break;
        case 1:
            D[i][0]<=D[i][2] ? min_idx=0:min_idx=2;
            break;
        case 2:
            D[i][0]<=D[i][1] ? min_idx=0:min_idx=1;
            break;
        default:
            break;
        }
        

    }



    return;
}

int main(){
    input();
    dp();

    cout<<*min_element(D[n-1],D[n-1]+3);
    return 0;

}
